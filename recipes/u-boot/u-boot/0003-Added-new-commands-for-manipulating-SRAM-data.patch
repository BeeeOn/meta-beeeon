From 9ca4c983c381e438f53b0050867e13e3f8a05821 Mon Sep 17 00:00:00 2001
From: Matej Postolka <xposto02@stud.fit.vutbr.cz>
Date: Mon, 29 Jun 2015 20:07:56 +0200
Subject: [PATCH 3/9] Added new commands for manipulating SRAM data

Signed-off-by: Matej Postolka <xposto02@stud.fit.vutbr.cz>
---
 common/cmd_mem.c | 225 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 225 insertions(+)

diff --git a/common/cmd_mem.c b/common/cmd_mem.c
index 43c3fb6..8e48b6e 100644
--- a/common/cmd_mem.c
+++ b/common/cmd_mem.c
@@ -30,6 +30,8 @@ DECLARE_GLOBAL_DATA_PTR;
 #ifndef CONFIG_SYS_MEMTEST_SCRATCH
 #define CONFIG_SYS_MEMTEST_SCRATCH 0
 #endif
+#define CONFIG_SRAM_SIZE 64
+#define CONFIG_SRAM_CTRLBYTES 4

 static int mod_mem(cmd_tbl_t *, int, int, int, char * const []);

@@ -157,6 +159,206 @@ static int do_mem_nm(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	return mod_mem (cmdtp, 0, flag, argc, argv);
 }

+/*
+ * These functions are custom
+ * for the BeeeOn usecase
+ *
+ */
+
+static int do_mem_init(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	if (argc < 2)
+		return 1;
+
+	ulong addr = 0;
+
+	// Default SRAM layout array, refer to wiki for more info
+	char data[] = {0xa5, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x01, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0xff};
+
+	addr = simple_strtoul(argv[1], NULL, 16);
+
+	if((void *)addr == NULL)
+		return 1;
+
+	memcpy((void *)addr, data, sizeof(data)/sizeof(char));
+
+	return 0;
+}
+
+static int do_mem_incr(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	if (argc < 2)
+		return 1;
+
+	ulong addr = 0;
+	addr = simple_strtoul(argv[1], NULL, 16);
+	int counter = 0;
+
+	if((void *)addr == NULL)
+		return 1;
+
+	char sram[CONFIG_SRAM_SIZE];
+	memcpy(sram, (void *)addr, CONFIG_SRAM_SIZE);
+
+	int i = 0;
+
+	while(i<CONFIG_SRAM_SIZE)
+	{
+		if(sram[i] == 0x01)
+		{
+			memcpy(&counter, (void *)(&sram[i+2]), sizeof(int));
+			counter++;
+			memcpy((void *)(&sram[i+2]), &counter, sizeof(int));
+			memcpy((void *)addr, sram, CONFIG_SRAM_SIZE);
+			return 0;
+		}
+
+		// We don't care about these ctrl bytes, skip to next ctrl byte
+		if(sram[i] == 0x02 || sram[i] == 0x03 || sram[i] == 0x04)
+			i = i + 1 + sram[i+1];
+
+		i++;
+	}
+
+	return 1;
+}
+
+static int do_mem_bootcheck(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	if (argc < 2)
+		return 1;
+
+	ulong addr = 0;
+	int cmpval, cntval = 0;
+	char bootflag = 0x00;
+
+	addr = simple_strtoul(argv[1], NULL, 16);
+
+	if((void *)addr == NULL)
+		return 1;
+
+	char sram[CONFIG_SRAM_SIZE];
+	memcpy(sram, (void *)addr, CONFIG_SRAM_SIZE);
+
+	int i = 0;
+
+	while(i<CONFIG_SRAM_SIZE)
+	{
+		if (sram[i] == 0x01)
+		{
+			memcpy(&cntval, (void *)(&sram[i+2]), sizeof(int));
+			i = i + 1 + sram[i+1];
+		}
+
+		else if (sram[i] == 0x03)
+		{
+			memcpy(&cmpval, (void *)(&sram[i+2]), sizeof(int));
+			i = i + 1 + sram[i+1];
+		}
+
+		else if (sram[i] == 0x04)
+		{
+			bootflag = sram[i+2];
+			i = i + 1 + sram[i+1];
+		}
+
+		// We don't care about these ctrl bytes, skip to next ctrl byte
+		else if(sram[i] == 0x02)
+			i = i + 1 + sram[i+1];
+
+		else if (sram[i] == 0xff)
+			break;
+
+		i++;
+	}
+
+	switch(bootflag)
+	{
+		// Standard operation
+		case 0x00:
+			break;
+
+		// Force regular boot
+		case 0x01:
+			printf("INFO: Bootflag is set to force normal boot!\n");
+			return 1;
+
+		// Force recovery
+		case 0x02:
+			printf("INFO: Bootflag is set to force recovery boot!\n");
+			return 0;
+	}
+
+	if (cntval >= cmpval)
+		return 0;
+	else
+		return 1;
+}
+
+static int do_mem_check(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	if (argc < 2)
+		return 1;
+
+	ulong addr = 0;
+	int controlByteCount = 0;
+
+	addr = simple_strtoul(argv[1], NULL, 16);
+
+	if((void *)addr == NULL)
+		return 1;
+
+	char sram[CONFIG_SRAM_SIZE];
+	memcpy(sram, (void *)addr, CONFIG_SRAM_SIZE);
+
+	int i = 0;
+
+	while (i<CONFIG_SRAM_SIZE)
+	{
+		// If first byte doesn't match magic value, SRAM is corrupt
+		if(i==0)
+		{
+			if(sram[i] != 0xa5)
+				return 1;
+		}
+
+		// Data bytes will follow
+		else if (sram[i] == 0x01 || sram[i] == 0x02 || sram[i] == 0x03 || sram[i] == 0x04)
+		{
+			// If size byte is 0, SRAM is corrupt
+			if(sram[i+1] == 0)
+				return 1;
+
+			// Skip over value bytes
+			i = i + 1 + sram[i+1];
+
+			// If we have left valid range, SRAM is corrupt
+			if(i >= CONFIG_SRAM_SIZE)
+				return 1;
+
+			// Increment ctrlbyte count
+			controlByteCount++;
+		}
+
+		// End of valid data, all good
+		else if (sram[i] == 0xff)
+			break;
+
+		// We shouldn't encounter any other values if we have skipped over data and caught all ctrl bytes
+		else
+			return 1;
+
+		i++;
+	}
+
+	if(controlByteCount == CONFIG_SRAM_CTRLBYTES)
+		return 0;
+	else
+		return 1;
+}
+
+/* End of custom commands */
+
 static int do_mem_mw(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 {
 #ifdef CONFIG_SYS_SUPPORT_64BIT_DATA
@@ -1249,6 +1451,29 @@ U_BOOT_CMD(
 #endif
 );

+U_BOOT_CMD(
+	minc, 2, 0, do_mem_incr,
+	"Increment value of SRAM-layout at given address",
+	"address"
+);
+
+U_BOOT_CMD(
+	bootcheck, 3, 0, do_mem_bootcheck,
+	"Evaluate SRAM layout at give address and preform boot check operations",
+	"address"
+);
+
+U_BOOT_CMD(
+	minit, 3, 0, do_mem_init,
+	"Create blank SRAM template at given address",
+	"address"
+);
+
+U_BOOT_CMD(
+	mcheck, 3, 0, do_mem_check,
+	"Check wherther SRAM layout at given address is valid",
+	"address"
+);

 U_BOOT_CMD(
 	mm,	2,	1,	do_mem_mm,
--
1.9.1
